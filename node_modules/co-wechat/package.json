{
  "name": "co-wechat",
  "version": "0.0.4",
  "description": "wechat api for co",
  "main": "index.js",
  "scripts": {
    "test": "make test-all"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/node-webot/co-wechat"
  },
  "keywords": [
    "wechat",
    "wexin"
  ],
  "author": {
    "name": "Jackson Tian"
  },
  "license": "MIT",
  "dependencies": {
    "xml2js": "0.4.4",
    "ejs": ">=1.0.0",
    "wechat-crypto": "0.0.2",
    "raw-body": "*"
  },
  "devDependencies": {
    "supertest": "*",
    "mocha": "*",
    "should": "~3.0.0",
    "expect.js": "*",
    "koa": "0.13.*",
    "koa-generic-session": "*",
    "travis-cov": "*",
    "coveralls": "*",
    "mocha-lcov-reporter": "*",
    "muk": "*",
    "rewire": "*",
    "istanbul-harmony": "*"
  },
  "readme": "co-wechat [![NPM version](https://badge.fury.io/js/co-wechat.png)](http://badge.fury.io/js/co-wechat) [![Build Status](https://travis-ci.org/node-webot/co-wechat.png?branch=master)](https://travis-ci.org/node-webot/co-wechat) [![Dependencies Status](https://david-dm.org/node-webot/co-wechat.png)](https://david-dm.org/node-webot/co-wechat) [![Coverage Status](https://coveralls.io/repos/node-webot/co-wechat/badge.png)](https://coveralls.io/r/node-webot/co-wechat)\n======\n\n微信公众平台消息接口服务中间件与API SDK\n\n## 功能列表\n- 自动回复（文本、图片、语音、视频、音乐、图文）\n- 会话支持（创新功能）\n\n## Installation\n\n```sh\n$ npm install co-wechat\n```\n\n## Use with koa\n\n```js\nvar wechat = require('co-wechat');\n\napp.use(wechat('some token').middleware(function *() {\n  // 微信输入信息都在this.weixin上\n  var message = this.weixin;\n  if (message.FromUserName === 'diaosi') {\n    // 回复屌丝(普通回复)\n    this.body = 'hehe';\n  } else if (message.FromUserName === 'text') {\n    //你也可以这样回复text类型的信息\n    this.body = {\n      content: 'text object',\n      type: 'text'\n    };\n  } else if (message.FromUserName === 'hehe') {\n    // 回复一段音乐\n    this.body = {\n      type: \"music\",\n      content: {\n        title: \"来段音乐吧\",\n        description: \"一无所有\",\n        musicUrl: \"http://mp3.com/xx.mp3\",\n        hqMusicUrl: \"http://mp3.com/xx.mp3\"\n      }\n    };\n  } else if (message.FromUserName === 'kf') {\n    // 转发到客服接口\n    this.body = {\n      type: \"customerService\",\n      kfAccount: \"test1@test\"\n    };\n  } else {\n    // 回复高富帅(图文回复)\n    this.body = [\n      {\n        title: '你来我家接我吧',\n        description: '这是女神与高富帅之间的对话',\n        picurl: 'http://nodeapi.cloudfoundry.com/qrcode.jpg',\n        url: 'http://nodeapi.cloudfoundry.com/'\n      }\n    ];\n  }\n}));\n```\n备注：token在微信平台的开发者中心申请\n\n### 回复消息\n当用户发送消息到微信公众账号，自动回复一条消息。这条消息可以是文本、图片、语音、视频、音乐、图文。详见：[官方文档](http://mp.weixin.qq.com/wiki/index.php?title=发送被动响应消息)\n\n#### 回复文本\n```js\nthis.body = 'Hello world!';\n// 或者\nthis.body = {type: \"text\", content: 'Hello world!'};\n```\n#### 回复图片\n```js\nthis.body = {\n  type: \"image\",\n  content: {\n    mediaId: 'mediaId'\n  }\n};\n```\n#### 回复语音\n```js\nthis.body = {\n  type: \"voice\",\n  content: {\n    mediaId: 'mediaId'\n  }\n};\n```\n#### 回复视频\n```js\nthis.body = {\n  type: \"video\",\n  content: {\n    mediaId: 'mediaId',\n    thumbMediaId: 'thumbMediaId'\n  }\n};\n```\n#### 回复音乐\n```js\nthis.body = {\n  title: \"来段音乐吧\",\n  description: \"一无所有\",\n  musicUrl: \"http://mp3.com/xx.mp3\",\n  hqMusicUrl: \"http://mp3.com/xx.mp3\"\n};\n```\n#### 回复图文\n```js\nthis.body = [\n  {\n    title: '你来我家接我吧',\n    description: '这是女神与高富帅之间的对话',\n    picurl: 'http://nodeapi.cloudfoundry.com/qrcode.jpg',\n    url: 'http://nodeapi.cloudfoundry.com/'\n  }\n];\n```\n\n#### 回复空串\n```js\nthis.body = '';\n```\n\n#### 转发到客服接口\n```js\nthis.body = {\n  type: \"customerService\",\n  kfAccount: \"test1@test\" //可选\n};\n```\n\n### WXSession支持\n由于公共平台应用的客户端实际上是微信，所以采用传统的Cookie来实现会话并不现实，为此中间件模块在openid的基础上添加了Session支持。一旦服务端启用了`koa-generic-session`中间件，在业务中就可以访问`this.wxsession`属性。这个属性与`this.session`行为类似。\n\n```js\nvar session = require('koa-generic-session');\napp.use(session());\napp.use(wechat('some token').middleware(function *() {\n  var info = this.weixin;\n  if (info.Content === '=') {\n    var exp = this.wxsession.text.join('');\n    this.wxsession.text = '';\n    this.body = exp;\n  } else {\n    this.wxsession.text = this.wxsession.text || [];\n    this.wxsession.text.push(info.Content);\n    this.body = '收到' + info.Content;\n  }\n}));\n```\n\n`this.wxsession`与`this.session`采用相同的存储引擎，这意味着如果采用redis作为存储，这样`wxsession`可以实现跨进程共享。\n\n## Show cases\n### Node.js API自动回复\n\n![Node.js API自动回复机器人](http://nodeapi.diveintonode.org/assets/qrcode.jpg)\n\n欢迎关注。\n\n代码：<https://github.com/JacksonTian/api-doc-service>\n\n你可以在[CloudFoundry](http://www.cloudfoundry.com/)、[appfog](https://www.appfog.com/)、[BAE](http://developer.baidu.com/wiki/index.php?title=docs/cplat/rt/node.js)等搭建自己的机器人。\n\n## 详细API\n原始API文档请参见：[消息接口指南](http://mp.weixin.qq.com/wiki/index.php?title=消息接口指南)。\n\n## 交流群\nQQ群：157964097，使用疑问，开发，贡献代码请加群。\n\n## 捐赠\n如果您觉得Wechat对您有帮助，欢迎请作者一杯咖啡\n\n![捐赠wechat](https://cloud.githubusercontent.com/assets/327019/2941591/2b9e5e58-d9a7-11e3-9e80-c25aba0a48a1.png)\n\n或者[![](http://img.shields.io/gratipay/JacksonTian.svg)](https://www.gittip.com/JacksonTian/)\n\n## License\nThe MIT license.\n\n## Contributors\n\n```\n project  : co-wechat\n repo age : 4 months\n active   : 9 days\n commits  : 19\n files    : 11\n authors  :\n    13  Jackson Tian  68.4%\n     6  ifeiteng      31.6%\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/node-webot/co-wechat/issues"
  },
  "homepage": "https://github.com/node-webot/co-wechat",
  "_id": "co-wechat@0.0.4",
  "dist": {
    "shasum": "e0c6b5e217408e7516b8d85ddbe9eabc340dceb3"
  },
  "_from": "co-wechat@",
  "_resolved": "https://registry.npmjs.org/co-wechat/-/co-wechat-0.0.4.tgz"
}
